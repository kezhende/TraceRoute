TECH TOPICS FOR THE VIDEO


This video provides a detailed summary of our experiences while developing TraceRoute, an application designed
for 3D navigation without the use of GPS. We've broken the summary down into 3 sections -

Sensors and Navigation
Graphics
Application Design

------------I - Sensors-------------

The motivation behind this idea was to get an understanding of where the user is without using GPS or WiFi. We're using a collection of sensors in lieu of GPS. We researched the capabilities of each sensor extensively. For interior navigation, we needed to do detect a three things: distance, direction, and altitude. 

We were quick to learn that the 3 dimensional accelerometer was prone to error, so we decided to avoid using it. With more research, we found out that most Android phones have reasonably accurate step detector. If we are able to get the height and gender of the user we can accurately get their stride length. As we all know, when we're walking, not every step is created equal. Unfortunately our program doesn't differentiate between small and large steps. This leads to some navigational errors. We thought about how we could correct for this, but we couldn't come up with an elegant solution.

Determining the direction of the step was another obstacle. We were convinced that we could use the accelerometer to detect movement direction, but this was quickly shot down when the accelerometer would give incredibly noisy data, which would often point us in erratic directions. We considered using the Gyroscope to detect phone orientation, but that doesn't give us a good indicator of where the user is moving. We settled on using the compass to get a fairly accurate reading. Unfortunately, this puts a strict use condition on the user - they have to hold the phone flat because any changes in the rotation of the phone throws off the compass. 

Once we managed to harness the sensors we wanted, we were able to walk in a straight line, turn around, walk back, and we would arrive at the same location. When we started walking more complicated routes, we noticed that slight changes in the reading from the compass would produce steps in incorrect directions, which would lead to large compounding errors. This is still a huge problem - to produce the best results we need an accurate direction measure, and the compass isn't capable of that. 

We wanted our application to also detect changes in altitude, which is something we haven't seen implemented in other applications. Recent Android phones have included barometers from which you can derive altitude. We included this because it would allow us to walk up flights of stairs and use elevators. However, the sensor is very sporadic - if we stood still, the phone could detect up to a meter of vertical movement. Even with this issue, we still found the sensor to be reasonably accurate.







 - Accelerometer - Gives decent readings, but can't take too much with acceleration alone. First off we have to negate the affect from gravity which Android does for us, but we really care about is position which requires double integration which is an absolute disaster and we never went very down this path other than trying to find phone position from it which was very 'glitchy' and no longer used anywhere.
 - Gyroscope - Gives ok readings for change in rotation, but over time it accumulates drift which is a research topic in its own that we were able to use an existing project. This is used for the VR mode.
 - Rotation Vector - This will give raw position in a quaternion that can correct for drift that the gyroscope accumulates. This is used for the VR mode.
 - Barometer - The barometer is used for getting the altitude and the only issue is that it bounces quite a lot while being in the same position. While being good at detecting an upward trend, it can't be used for accuracy. Used for the path.
 - Compass - The compass is as good as any compass can be and that strong interference from other factors will change its reading. Like the other sensors it is very jumpy and we have to have a buffer of 1-2 degrees before we detect a true change in direction which over time will accumulates drift but for shorter paths, (our current goal) it does better. Makes two strong assumptions, user is only walking forward and the phone is flat. Used for the path.
 - Step Counter - The step counter is accurate within 10% for a day which is good, but our use for it is distance which leads to other problems. Steps for example you have a very short distance forward and a small distance up. We detect the motion up but also detect the motion forward as a regular step which makes it inaccurate.

- Discuss the sensor fusion demo and corrective algorithm.
 - Low Pass Filter - Low pass filters will put certain weight on the previous readings of the sensor data smoothing it out and we used this originally for when we were using the accelerometer for the phone movement but also experimented by putting it on other sensor readings.
 - Drift Detector - We used another thesis which was able to detect significant phone drift over time which it would apply the the rotation vector and use that as the base.
 - Kalman filter - We will see if we can implement this.
 



------------II Navigation------------
As we were researching the capabilities of sensors we kept coming across the term Pedestrian Dead Reckoning, which is navigation without GPS. We started looking for this keyword in our research, and we came across some helpful papers and applications. These resources provided some insight into the limitations of our sensors, and some even had corrective algorithms to increase sensor accuracy. One such algorithm is a low pass filter. A low pass filter takes in multiple sensor readings, and returns weighted average of the readings. This makes it so a rouge piece of sensor data doesn't throw off our navigational system. The primary screen of our application uses the gyroscope to rotate a rectangular prism. As we experimented with this, we quickly discovered that gyroscope sensors suffer from compounding error known as 'drift'. Over time the gyroscope data becomes increasingly inaccurate. In order to fix this, we have to occasionally recalibrate the sensor on the fly.

Like I said earlier, our direction detection with the compass was error-prone. There's a corrective algorithm known as a Kalman filter which uses previous step data along with the current heading to do path prediction with decent accuracy. Like the low pass filter, the the kalman filter will correct for erratic step directions. Unfortunately due to time constrains we were unable to implement this.

With the body of research and development that we've done into this issue, it's clear that sensors alone aren't good enough for reliable navigation. We need an external source of information to assist us. A possible area of research is wireless beacons. If you have a set of beacons at known location inside of a building, you can use their signal strength and positions to locate yourself amongst them. If you use these in tandem with our navigational system, we believe our application would be accurate. 


------------III OpenGL ES------------
- Quick introduction to OpenGL ES.


OpenGL ES is a special flavor of openGL for mobile devices.
It's what powers 3d graphics on the Andriod platform.
I found interfacing with the API to be cumbersome and unfriendly. 
OpenGL was designed around C++, so Andriod's Java 
port was clumsy at best. I had no previous experience 
with graphics, so this was a painful, but rewarding learning experience.

Graphics programming requires a rich mix of low-level programming, matrix algebra, 3 dimensional
reasoning, and physics. It a long time before I was capable of drawing a 3-dimensional object.

Here's a summary of what I learned:
In a digital world, all objects are made up of a mesh of triangles. Even round things, such as spheres
and cyliders are approximated using a polyhdedrons composed entirely of triangles. The more triangles you have,
the more detailed your models are.

Take a look at the stones along this pathway. When you limit the amount of triangles used to draw this scene,
you get a flat, lifeless, geometric surfaces. As you increase the triangle count, you can see how the 
path comes to life. Every facet of each stone is carefully detailed, and you can see chips and cracks 
in the stonework. 

The verticies of every triangle in the world are represented by an array of 9 floating-point numbers.
There's an X, Y, and Z coordinate for each vertex. Complex objects are just arrays of triangular
verticies that combine to form the object.


In order to move objects around in the 3d world, you take their 
vertex coordinates and 'combine' them with a matrix, which is another array.
Depending on the type of operation you do, the verticies for the object 
can be translated, rotated, or both. 


A 3d world is no good without basic lighting effects. I had to learn 
how to program basic lighting through OpenGL shaders to give our
path some depth. The graphical effect that I implemented is called diffuse lighting. 
It shades faces of objects based on how much light they receive from a light
source. The steeper the angle between the light source and the face, the less light it receives.


- Talk about panning and scrolling
In order to make path visualization more interactive, we decided to try adding 
panning, rotation, and zoom capabilities. The user can use a single
finger gesture to pan the model, and can use two fingers to move the camera
forwards and backwards. Although this scheme is intuitive from the user's perspective 
it's very difficult to implement correctly. There's a surprising 
amount of math involved to get the camera to move the way you want it to. 
We didn't manage to get this feature fully working.  


On most devices, our application's 3d interface worked as we expected. However, 
on my model of the Samsung Galaxy S5, there's severe graphical artifacts. 
The grid lines flicker and
produce bizarre patterns across the screen. We tried it on a different model of the
Galaxy S5, and there was no artifacting. We suspect this is a hardware
issue.

To add insult to injury, my galaxy S5 also drew erratic, inconsistent paths and the
gyroscope didn't work well for model rotation. The application was barely useable
on my phone.

------------IV Interface Design------------
An application is only as good as its user interface. If your interface is weak,
it's not going to be a good experience for the user. A good deal of work was put into 
the interface to ensure smooth operation. 

- Design mock-up

As we made progress, our interface became crowded with
debugging menus and special settings. We needed to consolidate what 
was important into an intuitive, streamlined interface. We created 
a crude design mock-up in paint that illustrated the desired application 
structure. In interface design, it's important to present the user
with as little noise as possible. We tried to minimize the amount
of interactive objects on the main screen, and we made sure that
everything was marked with a picture. Additionally, we organized menus in 
a way that minimizes work required to change user-desirable settings.

The primary screen consists of an interactive 3d model, a menu bar, and a "play"
button. There's a compass in the lower left corner for orientation.
When the play button is pressed, the application begins recording the user's path.
A 'save' bubble also appears, which allows the user to save their path to the phone for
later viewing.
If you tap the compass after finishing a path, you enter 'VR mode', where you can
move the camera around the world and examine your path.

A user settings menu is accessable via a button on the top menu bar. When clicked, 
the user can modify their height and gender, and re-compute their stide length.
This is the screen the user sees on their first run of the application.
Also on the top bar is a path management button. When pressed, the user is brought
to a path management screen where they can view old paths and delete them.



----------------V Conclusion-----------------
Although TraceRoute certainly isn't ready for the market, we've learned many invaluable
things throughout the development of our application. We've strengthened 
our mobile development skills, learned about graphics, and we're now very familiar with
cell phone sensor systems.

Tools: 

Lollipop Screen Recorder

Movie Maker


PRESENTATION FORMAT 

Motivation - Small video

What we did - 
Video

What we learned - 
